kind: ConfigMap
apiVersion: v1
metadata:
  name: simplespring-config
data:
  application-dev.yaml: |-
    spring:
      config:
        activate:
          on-profile: dev
    environment: development
    greeting: hello from ConfigMap dev
    foo: bar
  application-prod.yaml: |-
    spring:
      config:
        activate:
          on-profile: prod
    environment: production
    greeting: hello from ConfigMap prod
    foo: bazz
  application.properties: |-
    spring.application.name=simplespring
    spring.profiles.active=dev

    server.port=8080

    # All traces should be sent to latency analysis tool
    management.tracing.sampling.probability=1.0
    management.endpoints.web.exposure.include=prometheus

    # Zipkin URL
    management.zipkin.tracing.endpoint=zipkin:9411/api/v2/spans

    # For Exemplars to work we need histogram buckets
    management.metrics.distribution.percentiles-histogram.http.server.requests=true

    # traceID and spanId are predefined MDC keys - we want the logs to include them
    logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

    # Use Spring Cloud Config Server at http://localhost:8888 if available
    spring.config.import=optional:configserver:http://config-server:8888
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: tempo-config
# data:
#   tempo.yaml: |
#     server:
#     http_listen_port: 3200
#     distributor:
#         receivers:
#             zipkin:
#     storage:
#         trace:
#             backend: local
#             local:
#                 path: /tmp/tempo/blocks
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: prometheus-config
# data:
#   prometheus.yml: |
#     global:
#     scrape_interval: 2s
#     evaluation_interval: 2s
#     scrape_configs:
#         - job_name: 'prometheus'
#           static_configs:
#               - targets: ['localhost:9090']
#         - job_name: 'apps'
#           metrics_path: '/actuator/prometheus'
#           static_configs:
#             - targets: ['localhost:8080']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning-datasources
data:
  datasources.yml: |
    apiVersion: 1

    datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://localhost:9090
          editable: false
          jsonData:
            httpMethod: POST
            exemplarTraceIdDestinations:
              - name: trace_id
                datasourceUid: tempo
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3200
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          apiVersion: 1
          uid: tempo
          jsonData:
              httpMethod: GET
              tracesToLogs:
                  datasourceUid: 'loki'
        - name: Loki
          type: loki
          uid: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
          apiVersion: 1
          jsonData:
              derivedFields:
                  -   datasourceUid: tempo
                      matcherRegex: \[.+,(.+?),
                      name: TraceID
                      url: $${__value.raw}
        - name: Zipkin
          type: zipkin
          uid: zipkin
          url: http://localhost:9411
          basicAuth: false
          isDefault: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning-dashboards
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
        - name: dashboards
          type: file
          disableDeletion: true
          editable: true
          options:
              path: /etc/grafana/provisioning/dashboards
              foldersFromFilesStructure: true